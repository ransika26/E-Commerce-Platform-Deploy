services:
  frontend-builder:
    image: ${DOCKER_USERNAME}/frontend-builder:latest
    container_name: frontend-builder-container
    build:
      context: ./frontend
      target: builder
      dockerfile: inline
      contents: |
        FROM node:20 as builder
        WORKDIR /app
        COPY package*.json ./
        RUN npm install
        COPY . .
        RUN npm run build
    volumes:
      - ./frontend:/app
    networks:
      - fs-app

  frontend-nginx:
    image: ${DOCKER_USERNAME}/frontend-nginx:latest
    container_name: frontend-nginx-container
    build:
      context: ./frontend
      dockerfile: inline
      contents: |
        FROM nginx:latest
        COPY dist /usr/share/nginx/html
        COPY nginx.conf /etc/nginx/conf.d/default.conf
    ports:
      - "5173:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend-builder
      - backend
    networks:
      - fs-app
    restart: unless-stopped

  backend:
    image: ${DOCKER_USERNAME}/backend:latest
    container_name: backend-container
    build:
      context: ./backend
      dockerfile: inline
      contents: |
        FROM node:20
        WORKDIR /app
        COPY package*.json ./
        RUN npm install
        COPY . .
        ENV NODE_ENV=production
        EXPOSE 3000
        CMD ["npx", "nodemon", "-L", "index.js"]
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MONGO_URL=mongodb://mongo:27017/ums
    depends_on:
      - mongo
    networks:
      - fs-app
    restart: unless-stopped

  mongo:
    image: mongo:latest
    container_name: mongo-container
    ports:
      - "27016:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - fs-app
    restart: unless-stopped
    command: mongod --quiet --logpath /dev/null

volumes:
  mongo-data:
    name: mongo-data

networks:
  fs-app:
    driver: bridge
    name: fs-app
